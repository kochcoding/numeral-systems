{"version":3,"sources":["styles/index.jsx","components/ConvertIntoDec.jsx","components/HornersMethod.jsx","components/HowItWorks.jsx","App.js","reportWebVitals.js","index.js"],"names":["FormulaRow","styled","p","MarkedFormula","ConvertIntoDec","number","base","useState","formula","setFormula","useEffect","i","old","digit","findIndex","x","length","parseInt","map","HornersMethod","decimalNumber","toBase","output","num","Math","floor","remainders","rowParts","push","rows","index","Fragment","repeat","style","marginTop","Typography","variant","gutterBottom","HowItWorks","input","fromBase","fontSize","differentBases","name","digits","App","setInput","setOutput","setFromBase","setToBase","getPlaceholderText","val","placeholder","forEach","handleInputChange","lastDigit","slice","find","includes","checkInputAllowed","remainder","decNum","out","toString","alert","paddingBottom","AppBar","position","background","Toolbar","Container","Grid","container","spacing","item","xs","sm","FormControl","fullWidth","InputLabel","Select","labelId","id","value","onChange","e","target","numBase","MenuItem","TextField","label","toUpperCase","disabled","multiline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb2a867f.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst FormulaRow = styled.p`\r\n    font-weight: 500;\r\n    font-size: 18px;\r\n    font-family: 'Roboto';\r\n    margin-top: 0px;\r\n    margin-bottom: 0px;\r\n`;\r\n\r\nconst MarkedFormula = styled.p`\r\n    display: inline;\r\n    font-weight: 900;\r\n    font-size: 18px;\r\n    font-family: 'Roboto';\r\n    margin-top: 0px;\r\n    margin-bottom: 0px;\r\n    background-color: yellow;\r\n`;\r\n\r\nexport {\r\n    FormulaRow,\r\n    MarkedFormula,\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { FormulaRow, MarkedFormula } from '../styles';\r\n\r\nconst ConvertIntoDec = ({ number, base }) => {\r\n    const [formula, setFormula] = useState([]);\r\n\r\n    const getNumberFromDigit = (digit) => {\r\n        const digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\r\n        return digits.findIndex(x => x === digit);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setFormula([<>{number}<sub>{base}</sub> = </>])\r\n\r\n        for (let i = 0; i < number.length; i++) {\r\n            setFormula(old => [...old, <>{getNumberFromDigit(number[i])} * {base}<sup>{number.length - i - 1}</sup></>])\r\n            i === number.length - 1 ? setFormula(old => [...old, <> = </>]) : setFormula(old => [...old, <> + </>])\r\n        }\r\n        setFormula(old => [...old, <MarkedFormula>{parseInt(number, base)}<sub>10</sub></MarkedFormula>])\r\n    }, [number, base])\r\n\r\n    return <>\r\n        <FormulaRow>\r\n            {formula.map(x => x)}\r\n        </FormulaRow>\r\n    </>\r\n}\r\n\r\nexport default ConvertIntoDec;","import React, { useState, useEffect } from 'react';\r\nimport { FormulaRow, MarkedFormula } from '../styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst HornersMethod = ({ decimalNumber, toBase, output }) => {\r\n    const [formula, setFormula] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let num = Math.floor(decimalNumber / toBase);\r\n        const remainders = [decimalNumber % toBase];\r\n        let rowParts = num < 2 * (toBase - 1) && num !== 0 ? [<>{`${toBase} * `}</>, <MarkedFormula>{num}</MarkedFormula>, <> + </>] : [<>{`${toBase} * ${num} + `}</>];\r\n        //let rowParts = [[<>{`${toBase} * ${num} + `}</>]];\r\n        rowParts.push(<MarkedFormula>{remainders[0]}</MarkedFormula>)\r\n        const rows = [];\r\n        rows.push(<>{rowParts.map((x, index) => <React.Fragment key={index}>{x}</React.Fragment>)}</>);\r\n\r\n        while (num > toBase - 1) {\r\n            remainders.push(num % toBase);\r\n            num = Math.floor(num / toBase);\r\n            rowParts = [`${toBase} * `];\r\n            rowParts.push(`(${toBase} * `.repeat(remainders.length - 1));\r\n            num < toBase ? rowParts.push(<MarkedFormula>{num}</MarkedFormula>) : rowParts.push(num);\r\n            for (let i = remainders.length - 1; i >= 0; i--) {\r\n                rowParts.push(' + ')\r\n                rowParts.push(<MarkedFormula>{remainders[i]}</MarkedFormula>)\r\n                if (i !== 0) rowParts.push(')');\r\n            }\r\n            rows.push(<>{rowParts.map((x, index) => <React.Fragment key={index}>{x}</React.Fragment>)}</>);\r\n        }\r\n\r\n        setFormula(rows);\r\n\r\n    }, [decimalNumber, toBase])\r\n\r\n    return <>\r\n        {formula.map((x, index) => <FormulaRow key={index}>{decimalNumber}<sub>10</sub> = {x}</FormulaRow>)}\r\n        <div style={{ marginTop: 15 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\nNow we can read the number from the marked digits: <MarkedFormula>{output}<sub>{toBase}</sub></MarkedFormula>\r\n            </Typography>\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default HornersMethod;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ConvertIntoDec from './ConvertIntoDec';\r\nimport HornersMethod from './HornersMethod';\r\n\r\nconst HowItWorks = ({ input, fromBase, toBase, output }) => {\r\n    return input ? <div style={{ marginTop: 30 }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n            How does it work?\r\n        </Typography>\r\n        {\r\n            fromBase === toBase ? <>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                    This one was easy! The bases are the same...\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\" gutterBottom style={{ fontSize: 18 }}>\r\n                    {input}<sub>{fromBase}</sub> = {input}<sub>{toBase}</sub>\r\n                </Typography>\r\n            </> : null\r\n        }\r\n        {\r\n            fromBase !== toBase && fromBase !== 10 ? <>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                    At first the number is converted into the decimal system:\r\n                </Typography>\r\n                <ConvertIntoDec number={input} base={fromBase} />\r\n            </> : null\r\n        }\r\n        {\r\n            fromBase !== toBase && toBase !== 10 ? <div style={fromBase === 10 ? null : { marginTop: 40 }}>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                    We convert the decimal number using the \"Honers' method\"\r\n                </Typography>\r\n                <HornersMethod decimalNumber={parseInt(input, fromBase)} toBase={toBase} output={output} />\r\n            </div> : null\r\n        }\r\n    </div> : null\r\n}\r\n\r\nexport default HowItWorks;","import React, { useState, useEffect } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\n\nimport HowItWorks from './components/HowItWorks';\n\nconst differentBases = [\n  { name: 'Binary (base 2)', base: 2, digits: ['0', '1'] },\n  { name: 'Ternary (base 3)', base: 3, digits: ['0', '1', '2'] },\n  { name: 'Quaternary (base 4)', base: 4, digits: ['0', '1', '2', '3'] },\n  { name: 'Quinary (base 5)', base: 5, digits: ['0', '1', '2', '3', '4'] },\n  { name: 'Senary (base 6)', base: 6, digits: ['0', '1', '2', '3', '4', '5'] },\n  { name: 'Septenary (base 7)', base: 7, digits: ['0', '1', '2', '3', '4', '5', '6'] },\n  { name: 'Octal (base 8)', base: 8, digits: ['0', '1', '2', '3', '4', '5', '6', '7'] },\n  { name: 'Nonary (base 9)', base: 9, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8'] },\n  { name: 'Decimal / Denary (base 10)', base: 10, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] },\n  { name: 'Hexadecimal (base 16)', base: 16, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'] },\n];\n\nconst App = () => {\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('');\n  const [fromBase, setFromBase] = useState(10);\n  const [toBase, setToBase] = useState(2);\n\n  const getPlaceholderText = (val) => {\n    let placeholder = 'Error'\n    differentBases.forEach(x => {\n      if (x.base === val) return placeholder = x.name;\n    });\n    return placeholder;\n  }\n\n  const getHexNumber = (decNum) => {\n    if (decNum < 0 || decNum > 15) {\n      alert(`Could not convert \"${decNum}\" into hex`);\n      return 0;\n    }\n    return differentBases.find(x => x.base === 16).digits[decNum];\n  }\n\n  const checkInputAllowed = (val) => {\n    const lastDigit = val.slice(-1);\n    const system = differentBases.find(x => x.base === fromBase);\n    return system.digits.includes(lastDigit);\n  }\n\n  const handleInputChange = (val) => {\n    if (!val) {\n      setInput('');\n      return setOutput('');\n    }\n    if (!checkInputAllowed(val)) return;\n\n    setInput(val);\n\n    let num = parseInt(val, fromBase);\n    let out = '';\n    let remainder;\n\n    while (num > 0) {\n      remainder = num % toBase;\n      out = toBase !== 16 ? remainder.toString() + out : getHexNumber(remainder) + out;\n      num = Math.floor(num / toBase);\n    }\n\n    setOutput(out);\n  }\n\n  useEffect(() => handleInputChange(input));\n\n  return (\n    <div style={{ paddingBottom: 300 }}>\n      <AppBar position=\"static\" style={{ background: '#1976d2' }}>\n        <Toolbar>\n          <Container>\n            <Typography variant=\"h6\">\n              Numeral Systems\n            </Typography>\n          </Container>\n        </Toolbar>\n      </AppBar>\n      <Container style={{ marginTop: 50 }}>\n        <Typography variant=\"h5\" gutterBottom>\n          Convert numbers between different numeral systems\n            </Typography>\n        <Typography variant=\"subtitle1\" gutterBottom>\n          Here you can convert numbers from different numeral systems into one another.\n        </Typography>\n        <Grid container spacing={3} style={{ marginTop: 10 }}>\n          <Grid item xs={6} sm={2}>\n            <FormControl fullWidth>\n              <InputLabel>From</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={fromBase}\n                onChange={(e) => {\n                  setInput('');\n                  setOutput('');\n                  setFromBase(e.target.value);\n                }}\n              >\n                {\n                  differentBases.map(numBase => <MenuItem key={numBase.base} value={numBase.base}>\n                    {numBase.name}\n                  </MenuItem>)\n                }\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={6} sm={2}>\n            <FormControl fullWidth>\n              <InputLabel>To</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={toBase}\n                onChange={(e) => setToBase(e.target.value)}\n              >\n                {\n                  differentBases.map(numBase => <MenuItem key={numBase.base} value={numBase.base}>\n                    {numBase.name}\n                  </MenuItem>)\n                }\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <TextField\n              fullWidth\n              label={getPlaceholderText(fromBase)}\n              value={input}\n              onChange={(e) => handleInputChange(e.target.value.toUpperCase())}\n            />\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <TextField\n              disabled\n              multiline\n              fullWidth\n              label={getPlaceholderText(toBase)}\n              value={output}\n            />\n          </Grid>\n        </Grid>\n        {\n          input ? <div style={{ marginTop: 20 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              {input}<sub>{fromBase}</sub> = {output}<sub>{toBase}</sub>\n            </Typography>\n          </div> : null\n        }\n\n        <HowItWorks input={input} output={output} fromBase={fromBase} toBase={toBase} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}